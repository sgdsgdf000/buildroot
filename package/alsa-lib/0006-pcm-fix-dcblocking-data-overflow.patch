From 5d42b173082c80c3cc74870298f92e8cc7f04e90 Mon Sep 17 00:00:00 2001
From: Yu YongZhen <yuyz@rock-chips.com>
Date: Thu, 21 Nov 2019 18:48:27 +0800
Subject: [PATCH] pcm: fix dcblocking data overflow

---
 src/pcm/pcm.c | 530 ++++++++++++++++++++++++++++++++++++++++++++++++++--------
 1 file changed, 464 insertions(+), 66 deletions(-)
 mode change 100644 => 100755 src/pcm/pcm.c

diff --git a/src/pcm/pcm.c b/src/pcm/pcm.c
old mode 100644
new mode 100755
index 7be6cb7..c8a04ef
--- a/src/pcm/pcm.c
+++ b/src/pcm/pcm.c
@@ -664,43 +664,47 @@ playback devices.
 			  P_STATE(PAUSED) | \
 			  P_STATE(DRAINING))
 
-//#define DCB_FILTER_16BIT
-#ifdef DCB_FILTER_16BIT
+#define DCB_FILTER_16BIT_32BIT
+#ifdef DCB_FILTER_16BIT_32BIT
 
-#define A1 32511 // (1-2^(-7))     Q32:1.31 // 32752=>0.99951171875
+#define A1 32511 // (1-2^(-7))     Q32:1.31 // 32752=>0.99951171875    32511=>0.992156982421875
 
 #define TO_16BIT_SHIFT 15
 #define MAX_Uint_PCMBIT_SIZE 4294967296
 #define MAX_UNSIGN_PCMBIT_SIZE 65536
-#define MAX_SIGN_POS_PCMBIT_SIZE 32768
+#define MAX_SIGN_POS_PCMBIT_SIZE 32767
 #define MAX_SIGN_NEG_PCMBIT_SIZE -32768
 
 /* static variables for previous values */
 /* left 1 */
-static int16_t x_prev_l1=0;
-static int16_t   y_prev_l1=0;
+static long long  x_prev_l1=0;
+static long long  y_prev_l1=0;
 /* right 1 */
-static int16_t x_prev_r1=0;
-static int16_t   y_prev_r1=0;
+static long long  x_prev_r1=0;
+static long long  y_prev_r1=0;
 /* left 2 */
-static int16_t x_prev_l2=0;
-static int16_t   y_prev_l2=0;
+static long long x_prev_l2=0;
+static long long   y_prev_l2=0;
 /* right 1 */
-static int16_t x_prev_r2=0;
-static int16_t   y_prev_r2=0;
+static long long x_prev_r2=0;
+static long long   y_prev_r2=0;
 /* left 1 */
-static int16_t x_prev_l3=0;
-static int16_t   y_prev_l3=0;
+static long long x_prev_l3=0;
+static long long   y_prev_l3=0;
 /* right 1 */
-static int16_t x_prev_r3=0;
-static int16_t   y_prev_r3=0;
+static long long x_prev_r3=0;
+static long long   y_prev_r3=0;
 
-void dc_filter_left1(int16_t *pcmIn)
+static long long x_prev_l4=0;
+static long long   y_prev_l4=0;
+static long long x_prev_r4=0;
+static long long   y_prev_r4=0;
+static void dc_filter_left1(int16_t *pcmIn)
 {
-    int16_t sampleIn, delta_x, sampleOut;
-    int16_t   a1_y_prev;
+    long long sampleIn, delta_x, sampleOut;
+    long long a1_y_prev;
 
-    sampleIn = *pcmIn;
+    sampleIn = (long long)*pcmIn;
     delta_x = sampleIn-x_prev_l1;
     a1_y_prev = A1*y_prev_l1/MAX_SIGN_POS_PCMBIT_SIZE;
     sampleOut = delta_x+a1_y_prev;
@@ -708,14 +712,19 @@ void dc_filter_left1(int16_t *pcmIn)
     x_prev_l1 = sampleIn;
     y_prev_l1 = sampleOut;
 
-    *pcmIn = sampleOut;
+    if (sampleOut >= MAX_SIGN_POS_PCMBIT_SIZE)
+		*pcmIn = MAX_SIGN_POS_PCMBIT_SIZE;
+	else if (sampleOut <= MAX_SIGN_NEG_PCMBIT_SIZE)
+		*pcmIn = MAX_SIGN_NEG_PCMBIT_SIZE;
+	else
+        *pcmIn = (int16_t)sampleOut;
 }
-void dc_filter_right1(int16_t *pcmIn)
+static void dc_filter_right1(int16_t *pcmIn)
 {
-    int16_t sampleIn, delta_x, sampleOut;
-    int16_t a1_y_prev;
+    long long sampleIn, delta_x, sampleOut;
+    long long a1_y_prev;
 
-    sampleIn = *pcmIn;
+    sampleIn = (long long)*pcmIn;
     delta_x = sampleIn-x_prev_r1;
     a1_y_prev = A1*y_prev_r1/MAX_SIGN_POS_PCMBIT_SIZE;
     sampleOut = delta_x+a1_y_prev;
@@ -723,14 +732,19 @@ void dc_filter_right1(int16_t *pcmIn)
     x_prev_r1 = sampleIn;
     y_prev_r1 = sampleOut;
 
-    *pcmIn = sampleOut;
+    if (sampleOut >= MAX_SIGN_POS_PCMBIT_SIZE)
+		*pcmIn = MAX_SIGN_POS_PCMBIT_SIZE;
+	else if (sampleOut <= MAX_SIGN_NEG_PCMBIT_SIZE)
+		*pcmIn = MAX_SIGN_NEG_PCMBIT_SIZE;
+	else
+        *pcmIn = (int16_t)sampleOut;
 }
-void dc_filter_left2(int16_t *pcmIn)
+static void dc_filter_left2(int16_t *pcmIn)
 {
-    int16_t sampleIn, delta_x, sampleOut;
-    int16_t a1_y_prev;
+    long long sampleIn, delta_x, sampleOut;
+    long long a1_y_prev;
 
-    sampleIn = *pcmIn;
+    sampleIn = (long long)*pcmIn;
     delta_x = sampleIn-x_prev_l2;
     a1_y_prev = A1*y_prev_l2/MAX_SIGN_POS_PCMBIT_SIZE;
     sampleOut = delta_x+a1_y_prev;
@@ -738,15 +752,20 @@ void dc_filter_left2(int16_t *pcmIn)
     x_prev_l2 = sampleIn;
     y_prev_l2 = sampleOut;
 
-    *pcmIn = sampleOut;
+    if (sampleOut >= MAX_SIGN_POS_PCMBIT_SIZE)
+		*pcmIn = MAX_SIGN_POS_PCMBIT_SIZE;
+	else if (sampleOut <= MAX_SIGN_NEG_PCMBIT_SIZE)
+		*pcmIn = MAX_SIGN_NEG_PCMBIT_SIZE;
+	else
+        *pcmIn = (int16_t)sampleOut;
 }
 
-void dc_filter_right2(int16_t *pcmIn)
+static void dc_filter_right2(int16_t *pcmIn)
 {
-    int16_t sampleIn, delta_x, sampleOut;
-    int16_t a1_y_prev;
+    long long sampleIn, delta_x, sampleOut;
+    long long a1_y_prev;
 
-    sampleIn = *pcmIn;
+    sampleIn = (long long)*pcmIn;
     delta_x = sampleIn-x_prev_r2;
     a1_y_prev = A1*y_prev_r2/MAX_SIGN_POS_PCMBIT_SIZE;
     sampleOut = delta_x+a1_y_prev;
@@ -754,44 +773,110 @@ void dc_filter_right2(int16_t *pcmIn)
     x_prev_r2 = sampleIn;
     y_prev_r2 = sampleOut;
 
-    *pcmIn = sampleOut;
+    if (sampleOut >= MAX_SIGN_POS_PCMBIT_SIZE)
+		*pcmIn = MAX_SIGN_POS_PCMBIT_SIZE;
+	else if (sampleOut <= MAX_SIGN_NEG_PCMBIT_SIZE)
+		*pcmIn = MAX_SIGN_NEG_PCMBIT_SIZE;
+	else
+        *pcmIn = (int16_t)sampleOut;
 }
-void dc_filter_left3(int16_t *pcmIn)
+static void dc_filter_left3(int16_t *pcmIn)
 {
-    int16_t sampleIn, delta_x, sampleOut;
-    int16_t a1_y_prev;
+    long long sampleIn, delta_x, sampleOut;
+    long long a1_y_prev;
 
-    sampleIn = *pcmIn;
+    sampleIn = (long long)*pcmIn;
     delta_x = sampleIn-x_prev_l3;
     a1_y_prev = A1*y_prev_l3/MAX_SIGN_POS_PCMBIT_SIZE;
     sampleOut = delta_x+a1_y_prev;
 
     x_prev_l3 = sampleIn;
-    y_prev_l3 = (int16_t)sampleOut;
+    y_prev_l3 = sampleOut;
 
-    *pcmIn = sampleOut;
+    if (sampleOut >= MAX_SIGN_POS_PCMBIT_SIZE)
+		*pcmIn = MAX_SIGN_POS_PCMBIT_SIZE;
+	else if (sampleOut <= MAX_SIGN_NEG_PCMBIT_SIZE)
+		*pcmIn = MAX_SIGN_NEG_PCMBIT_SIZE;
+	else
+        *pcmIn = (int16_t)sampleOut;
 }
 
-void dc_filter_right3(int16_t *pcmIn)
+static void dc_filter_right3(int16_t *pcmIn)
 {
-    int16_t sampleIn, delta_x, sampleOut;
-    int16_t a1_y_prev;
+    long long sampleIn, delta_x, sampleOut;
+    long long a1_y_prev;
 
-    sampleIn = *pcmIn;
+    sampleIn = (long long)*pcmIn;
     delta_x = sampleIn-x_prev_r3;
     a1_y_prev = A1*y_prev_r3/MAX_SIGN_POS_PCMBIT_SIZE;
     sampleOut = delta_x+a1_y_prev;
 
     x_prev_r3 = sampleIn;
-    y_prev_r3 = (int16_t)sampleOut;
+    y_prev_r3 = sampleOut;
+
+    if (sampleOut >= MAX_SIGN_POS_PCMBIT_SIZE)
+		*pcmIn = MAX_SIGN_POS_PCMBIT_SIZE;
+	else if (sampleOut <= MAX_SIGN_NEG_PCMBIT_SIZE)
+		*pcmIn = MAX_SIGN_NEG_PCMBIT_SIZE;
+	else
+        *pcmIn = (int16_t)sampleOut;
+}
+static void dc_filter_left4(int16_t *pcmIn)
+{
+    long long sampleIn, delta_x, sampleOut;
+    long long a1_y_prev;
+
+    sampleIn = (long long)*pcmIn;
+    delta_x = sampleIn-x_prev_l4;
+    a1_y_prev = A1*y_prev_l4/MAX_SIGN_POS_PCMBIT_SIZE;
+    sampleOut = delta_x+a1_y_prev;
+
+    x_prev_l4 = sampleIn;
+    y_prev_l4 = sampleOut;
 
-    *pcmIn = sampleOut;
+    if (sampleOut >= MAX_SIGN_POS_PCMBIT_SIZE)
+		*pcmIn = MAX_SIGN_POS_PCMBIT_SIZE;
+	else if (sampleOut <= MAX_SIGN_NEG_PCMBIT_SIZE)
+		*pcmIn = MAX_SIGN_NEG_PCMBIT_SIZE;
+	else
+        *pcmIn = (int16_t)sampleOut;
 }
 
-void DCBDoing(void* pIn, int length, int channels)
+static void dc_filter_right4(int16_t *pcmIn)
+{
+    long long sampleIn, delta_x, sampleOut;
+    long long a1_y_prev;
+
+    sampleIn = (long long)*pcmIn;
+    delta_x = sampleIn-x_prev_r4;
+    a1_y_prev = A1*y_prev_r4/MAX_SIGN_POS_PCMBIT_SIZE;
+    sampleOut = delta_x+a1_y_prev;
+
+    x_prev_r4 = sampleIn;
+    y_prev_r4 = sampleOut;
+
+    if (sampleOut >= MAX_SIGN_POS_PCMBIT_SIZE)
+		*pcmIn = MAX_SIGN_POS_PCMBIT_SIZE;
+	else if (sampleOut <= MAX_SIGN_NEG_PCMBIT_SIZE)
+		*pcmIn = MAX_SIGN_NEG_PCMBIT_SIZE;
+	else
+        *pcmIn = (int16_t)sampleOut;
+}
+
+static void DCBDoing(void* pIn, int length, int channels)
 {
     int i = 0;
     int16_t * pInBuf  =  (int16_t *)pIn;
+	static int env_checked = 0;
+	static char *alsa_dcbdoing = NULL;
+
+	if (0 == env_checked) {
+		env_checked = 1;
+		alsa_dcbdoing = getenv("ALSA_LIB_DCBDoing");
+	}
+
+	if (NULL == alsa_dcbdoing)
+		return;
 
     //printf("vicent-DCB_Doing---------------length = %d\n",length);
 
@@ -818,30 +903,330 @@ void DCBDoing(void* pIn, int length, int channels)
             case 5:
                 dc_filter_right3(pInBuf);
                 break;
+			case 6:
+                dc_filter_left4(pInBuf);
+                break;
+            case 7:
+                dc_filter_right4(pInBuf);
+                break;
             default:
                 break;
         }
         pInBuf++;
     }
 }
-#endif
-void add_gain(void* pIn, int length, int channels)
+
+#define A1_32 32752//(2147481500)//32511 // (1-2^(-7))     Q32:1.31 // 32752=>0.99951171875  2147462173=>0.9999899999238551  2147481500 => 0.9999989997595549
+#define MAX_SIGN_POS_PCMBIT_SIZE_32  32768//2147483648
+#define MAX_SIGN_POS_PCMBIT_32_SIZE 2147483647
+#define MAX_SIGN_NEG_PCMBIT_32_SIZE -2147483648
+
+/* left 1 */
+static int64_t x_prev_l1_32=0;/*int32_t*/
+static int64_t y_prev_l1_32=0;/*int32_t*/
+/* right 1 */
+static int64_t x_prev_r1_32=0;
+static int64_t y_prev_r1_32=0;
+/* left 2 */
+static int64_t x_prev_l2_32=0;
+static int64_t y_prev_l2_32=0;
+/* right 1 */
+static int64_t x_prev_r2_32=0;
+static int64_t y_prev_r2_32=0;
+/* left 1 */
+static int64_t x_prev_l3_32=0;
+static int64_t y_prev_l3_32=0;
+/* right 1 */
+static int64_t x_prev_r3_32=0;
+static int64_t y_prev_r3_32=0;
+
+static int64_t x_prev_l4_32=0;
+static int64_t y_prev_l4_32=0;
+
+static int64_t x_prev_r4_32=0;
+static int64_t y_prev_r4_32=0;
+
+static void dc_filter_left1_32(int32_t *pcmIn)
+{
+    int64_t sampleIn, delta_x, sampleOut;
+    int64_t   a1_y_prev;
+
+    sampleIn = (int64_t)*pcmIn;
+    delta_x = sampleIn - x_prev_l1_32;
+    a1_y_prev = A1_32*y_prev_l1_32 / MAX_SIGN_POS_PCMBIT_SIZE_32;
+    sampleOut = delta_x+a1_y_prev;
+
+    x_prev_l1_32 = sampleIn;
+    y_prev_l1_32 = sampleOut;
+
+
+    if (sampleOut >= MAX_SIGN_POS_PCMBIT_32_SIZE)
+		*pcmIn = MAX_SIGN_POS_PCMBIT_32_SIZE;
+	else if (sampleOut <= MAX_SIGN_NEG_PCMBIT_32_SIZE)
+		*pcmIn = MAX_SIGN_NEG_PCMBIT_32_SIZE;
+	else
+        *pcmIn = (int32_t)sampleOut;
+}
+static void dc_filter_right1_32(int32_t *pcmIn)
+{
+    int64_t sampleIn, delta_x, sampleOut;
+    int64_t a1_y_prev;
+
+    sampleIn = (int64_t)*pcmIn;
+    delta_x = sampleIn-x_prev_r1_32;
+    a1_y_prev = A1_32*y_prev_r1_32/MAX_SIGN_POS_PCMBIT_SIZE_32;
+    sampleOut = delta_x+a1_y_prev;
+
+    x_prev_r1_32 = sampleIn;
+    y_prev_r1_32 = sampleOut;
+
+    if (sampleOut >= MAX_SIGN_POS_PCMBIT_32_SIZE)
+		*pcmIn = MAX_SIGN_POS_PCMBIT_32_SIZE;
+	else if (sampleOut <= MAX_SIGN_NEG_PCMBIT_32_SIZE)
+		*pcmIn = MAX_SIGN_NEG_PCMBIT_32_SIZE;
+	else
+        *pcmIn = (int32_t)sampleOut;
+}
+
+static void dc_filter_left2_32(int32_t *pcmIn)
+{
+    int64_t sampleIn, delta_x, sampleOut;
+    int64_t a1_y_prev;
+
+    sampleIn = (int64_t) *pcmIn;
+    delta_x = sampleIn-x_prev_l2_32;
+    a1_y_prev = A1_32*y_prev_l2_32/MAX_SIGN_POS_PCMBIT_SIZE_32;
+    sampleOut = delta_x+a1_y_prev;
+
+    x_prev_l2_32 = sampleIn;
+    y_prev_l2_32 = sampleOut;
+
+    if (sampleOut >= MAX_SIGN_POS_PCMBIT_32_SIZE)
+		*pcmIn = MAX_SIGN_POS_PCMBIT_32_SIZE;
+	else if (sampleOut <= MAX_SIGN_NEG_PCMBIT_32_SIZE)
+		*pcmIn = MAX_SIGN_NEG_PCMBIT_32_SIZE;
+	else
+        *pcmIn = (int32_t)sampleOut;
+}
+
+static void dc_filter_right2_32(int32_t *pcmIn)
+{
+    int64_t sampleIn, delta_x, sampleOut;
+    int64_t a1_y_prev;
+
+    sampleIn = (int64_t)*pcmIn;
+    delta_x = sampleIn-x_prev_r2_32;
+    a1_y_prev = A1_32*y_prev_r2_32/MAX_SIGN_POS_PCMBIT_SIZE_32;
+    sampleOut = delta_x+a1_y_prev;
+
+    x_prev_r2_32 = sampleIn;
+    y_prev_r2_32 = sampleOut;
+
+    if (sampleOut >= MAX_SIGN_POS_PCMBIT_32_SIZE)
+		*pcmIn = MAX_SIGN_POS_PCMBIT_32_SIZE;
+	else if (sampleOut <= MAX_SIGN_NEG_PCMBIT_32_SIZE)
+		*pcmIn = MAX_SIGN_NEG_PCMBIT_32_SIZE;
+	else
+        *pcmIn = (int32_t)sampleOut;
+}
+static void dc_filter_left3_32(int32_t *pcmIn)
+{
+    int64_t sampleIn, delta_x, sampleOut;
+    int64_t a1_y_prev;
+
+    sampleIn =(int64_t) *pcmIn;
+    delta_x = sampleIn-x_prev_l3_32;
+    a1_y_prev = A1_32*y_prev_l3_32/MAX_SIGN_POS_PCMBIT_SIZE_32;
+    sampleOut = delta_x+a1_y_prev;
+
+    x_prev_l3_32 = sampleIn;
+    y_prev_l3_32 = sampleOut;
+
+    if (sampleOut >= MAX_SIGN_POS_PCMBIT_32_SIZE)
+		*pcmIn = MAX_SIGN_POS_PCMBIT_32_SIZE;
+	else if (sampleOut <= MAX_SIGN_NEG_PCMBIT_32_SIZE)
+		*pcmIn = MAX_SIGN_NEG_PCMBIT_32_SIZE;
+	else
+        *pcmIn = (int32_t)sampleOut;
+}
+
+static void dc_filter_right3_32(int32_t *pcmIn)
+{
+    int64_t sampleIn, delta_x, sampleOut;
+    int64_t a1_y_prev;
+
+    sampleIn = (int64_t)*pcmIn;
+    delta_x = sampleIn-x_prev_r3_32;
+    a1_y_prev = A1_32*y_prev_r3_32/MAX_SIGN_POS_PCMBIT_SIZE_32;
+    sampleOut = delta_x+a1_y_prev;
+
+    x_prev_r3_32 = sampleIn;
+    y_prev_r3_32 = sampleOut;
+
+    if (sampleOut >= MAX_SIGN_POS_PCMBIT_32_SIZE)
+		*pcmIn = MAX_SIGN_POS_PCMBIT_32_SIZE;
+	else if (sampleOut <= MAX_SIGN_NEG_PCMBIT_32_SIZE)
+		*pcmIn = MAX_SIGN_NEG_PCMBIT_32_SIZE;
+	else
+        *pcmIn = (int32_t)sampleOut;
+}
+
+static void dc_filter_left4_32(int32_t *pcmIn)
+{
+    int64_t sampleIn, delta_x, sampleOut;
+    int64_t a1_y_prev;
+
+    sampleIn =(int64_t) *pcmIn;
+    delta_x = sampleIn-x_prev_l4_32;
+    a1_y_prev = A1_32*y_prev_l4_32/MAX_SIGN_POS_PCMBIT_SIZE_32;
+    sampleOut = delta_x+a1_y_prev;
+
+    x_prev_l4_32 = sampleIn;
+    y_prev_l4_32 = sampleOut;
+
+    if (sampleOut >= MAX_SIGN_POS_PCMBIT_32_SIZE)
+		*pcmIn = MAX_SIGN_POS_PCMBIT_32_SIZE;
+	else if (sampleOut <= MAX_SIGN_NEG_PCMBIT_32_SIZE)
+		*pcmIn = MAX_SIGN_NEG_PCMBIT_32_SIZE;
+	else
+        *pcmIn = (int32_t)sampleOut;
+}
+
+static void dc_filter_right4_32(int32_t *pcmIn)
+{
+    int64_t sampleIn, delta_x, sampleOut;
+    int64_t a1_y_prev;
+
+    sampleIn = (int64_t)*pcmIn;
+    delta_x = sampleIn-x_prev_r4_32;
+    a1_y_prev = A1_32*y_prev_r4_32/MAX_SIGN_POS_PCMBIT_SIZE_32;
+    sampleOut = delta_x+a1_y_prev;
+
+    x_prev_r4_32 = sampleIn;
+    y_prev_r4_32 = sampleOut;
+
+    if (sampleOut >= MAX_SIGN_POS_PCMBIT_32_SIZE)
+		*pcmIn = MAX_SIGN_POS_PCMBIT_32_SIZE;
+	else if (sampleOut <= MAX_SIGN_NEG_PCMBIT_32_SIZE)
+		*pcmIn = MAX_SIGN_NEG_PCMBIT_32_SIZE;
+	else
+        *pcmIn = (int32_t)sampleOut;
+}
+
+static void DCBDoing_32(void* pIn,int length, int channels)
 {
     int i = 0;
-    int16_t * pInBuf  =  (int16_t *)pIn;
-    char *alsa_gain_level = getenv("ALSA_LIB_ADD_GAIN");
-    if(alsa_gain_level) {
-        int level = atoi(alsa_gain_level);
-        //printf("gain level:%d\n",level);
-        for(i = 0; i < length; i ++ ) {
-            int curChannel = i % channels;
-            if(curChannel < channels - 2 ) {//audio loopback no need to add gain
-                (*pInBuf) <<= level;
-            }
-            pInBuf++;
+    int32_t * pInBuf  =  (int32_t *)pIn;
+	static int env_checked = 0;
+	static char *alsa_dcbdoing = NULL;
+
+	if (0 == env_checked) {
+		env_checked = 1;
+		alsa_dcbdoing = getenv("ALSA_LIB_DCBDoing");
+	}
+
+	if (NULL == alsa_dcbdoing)
+		return;
+    //printf("DCB %d,%d\n",length, channels);
+
+    for(i = 0; i < length; i ++ ) {
+
+        int curChannel = i % channels;
+
+        switch(curChannel){
+            case 0:
+                dc_filter_left1_32(pInBuf);
+                break;
+            case 1:
+                dc_filter_right1_32(pInBuf);
+                break;
+            case 2:
+                dc_filter_left2_32(pInBuf);
+                break;
+            case 3:
+                dc_filter_right2_32(pInBuf);
+                break;
+            case 4:
+                dc_filter_left3_32(pInBuf);
+                break;
+            case 5:
+                dc_filter_right3_32(pInBuf);
+                break;
+            case 6:
+                dc_filter_left4_32(pInBuf);
+                break;
+            case 7:
+                dc_filter_right4_32(pInBuf);
+                break;
+            default:
+                break;
         }
+        pInBuf++;
     }
 }
+
+#endif
+
+
+static void add_gain_rk_16(void* pIn,int length, int channels)
+{
+	int i = 0;
+	int16_t * pInBuf  =  (int16_t *)pIn;
+	int32_t temp;
+	static int env_checked = 0;
+	static char *alsa_gain_level = NULL;
+	static int level = 0;
+
+	if (0 == env_checked) {
+		env_checked = 1;
+		alsa_gain_level = getenv("ALSA_LIB_ADD_GAIN");
+		if (alsa_gain_level)
+			level = atoi(alsa_gain_level);
+	}
+
+	if(alsa_gain_level) {
+		for(i = 0; i < length; i++ ) {
+			int curChannel = i % channels;
+			if(curChannel < channels - 2 ) {//audio loopback no need to add gain
+				temp = (*pInBuf) << level;
+				if (abs(temp) > 0x7fff)
+					temp = ((*pInBuf)<0) ? (int16_t)0x8000 : (int16_t)0x7fff;
+				(*pInBuf) = (int16_t)temp;
+			}
+			pInBuf++;
+		}
+	}
+}
+
+static void add_gain_rk_32(void* pIn,int length, int channels)
+{
+	int i = 0;
+	int32_t * pInBuf  =  (int16_t *)pIn;
+	int64_t temp;
+	static int env_checked = 0;
+	static char *alsa_gain_level = NULL;
+	static int level = 0;
+
+	if (0 == env_checked) {
+		env_checked = 1;
+		alsa_gain_level = getenv("ALSA_LIB_ADD_GAIN");
+		if (alsa_gain_level)
+			level = atoi(alsa_gain_level);
+	}
+
+	if(alsa_gain_level) {
+		for(i = 0; i < length; i++ ) {
+			int curChannel = i % channels;
+			if(curChannel < channels - 2 ) {//audio loopback no need to add gain
+				temp = (*pInBuf) << level;
+				if (llabs(temp) > 0x7fffffff)
+					temp = ((*pInBuf)<0) ? (int32_t)0x80000000 : (int32_t)0x7fffffff;
+				(*pInBuf) = (int32_t)temp;
+			}
+			pInBuf++;
+		}
+	}
+}
 /* check whether the PCM is in the unexpected state */
 static int bad_pcm_state(snd_pcm_t *pcm, unsigned int supported_states)
 {
@@ -1688,11 +2073,24 @@ snd_pcm_sframes_t snd_pcm_readi(snd_pcm_t *pcm, void *buffer, snd_pcm_uframes_t
 	if (bad_pcm_state(pcm, P_STATE_RUNNABLE))
 		return -EBADFD;
 
-	snd_pcm_sframes_t tmp = _snd_pcm_readi(pcm, buffer, size);  
-#ifdef DCB_FILTER_16BIT
-	DCBDoing((void*)buffer, tmp * pcm->frame_bits / 8 / sizeof(int16_t), pcm->channels);
+	snd_pcm_sframes_t tmp = _snd_pcm_readi(pcm, buffer, size);
+	//printf("dcb size %d,tmp %d,sam_bits=%d,framebits=%d,f=%d,c=%d,\n",size,tmp,pcm->sample_bits,pcm->frame_bits,pcm->format,pcm->channels);
+	if(pcm->channels != 2 && tmp > 0) {//exclude /usr/bin/eq_drc_process
+		if(pcm->sample_bits == 16) {
+#ifdef DCB_FILTER_16BIT_32BIT
+			DCBDoing((void*)buffer, tmp * pcm->frame_bits / pcm->sample_bits, pcm->channels);
 #endif
-	add_gain((void*)buffer, tmp * pcm->frame_bits / 8 / sizeof(int16_t), pcm->channels);
+			add_gain_rk_16((void*)buffer, tmp * pcm->frame_bits / pcm->sample_bits, pcm->channels);
+		}
+		else if(pcm->sample_bits == 32){
+#ifdef DCB_FILTER_16BIT_32BIT
+			DCBDoing_32((void*)buffer, tmp * pcm->frame_bits / pcm->sample_bits, pcm->channels);
+#endif
+			add_gain_rk_32((void*)buffer, tmp * pcm->frame_bits / pcm->sample_bits, pcm->channels);
+		}
+	}
+
+	//add_gain((void*)buffer, tmp * pcm->frame_bits / 8 / sizeof(int16_t), pcm->channels);
 	return tmp;
 }
 
-- 
2.7.4

